# Developer Resources
## Coding Standards and Conventions
The following are naming, rounding, and coding conventions that should be followed when making changes to ReEDS. All new code contributed to the repo should follow these conventions.

**Note:** Because these conventions were not written until after the model development began, you will notice that some of these conventions are violated in the current code base. The conventions are far from comprehensive. Our hope is that this light approach can help bring consistency to the model code without being burdensome to those writing the code.


### Naming, Rounding, and Coding Conventions
#### Naming Conventions
* File names (GAMS files, input files, output files)
  * Folders are lower case
  * Files are lower case with underscores separating words (atb_mid_wind_2018.csv)
  * GAMS files are proceeded by a letter and underscore, with each letter representing a file category and letters in alpha-order of file execution whenever possible (a_write_data.gms). When there are multiple GAMS files in the same category, they should be numbered to show the order in which they are called (a1_write_data, a2_inputs, a3_inputs_demand)
  * Output files start with a noun indicator for the general output category to make it easier to find (curt_marg rather than marg_curt, gen_ann rather than ann_gen)

* Parameters
  * Use lower case with underscores separating words
  * Like the output files, the first word of parameters should be a noun indicator of the parameter type (curt_marg rather than marg_curt)
  * Cost parameters should generally start with “cost” (e.g., cost_fom, cost_cap)

* Variables
  * Use capital letters (example: INV)
  * Where possible, use the same naming for related variables (e.g., INV; INV_TRANS)
  * The first indicator in a variable name should be a noun or noun abbreviation for the variable type or category

* equations (model constraints)
  * Begin with the prefix “eq_”
  * Use all lower-case letters with underscores separating words (example: eq_reserve_margin)

* switches
  * Begin with the prefix “Sw_”
  * Use descriptive names with upper camel case (e.g., Sw_ReserveMargin)
  * For on/off switches, "OFF" = 0 and "ON" =1

* indices/sets
  * Use lower case
  * Use short rather than descriptive (e.g., “i” instead of “tech”) – preference for one or two letter names.

* aliases
  * Use the same alpha character as the original set followed by a number (example: alias(r,r2))

* subsets
  * Use lowercase
  * Use short but descriptive text
  * example: conv(i) is the subset of technologies that are “conventional”

* crosswalk sets
  * Use the set names and separated by an underscore
  * example: r_st(r,st) is the crosswalk between region “r” and state “st”

* Choosing names for parameters and variables
  * Names should be descriptive (e.g., “curt_marg” rather than “cm”)
  * Shorter names are generally preferred (e.g., “curt_marg” rather than “curtailment_marginal”)

#### Rounding Conventions 
As a general rule, costs or prices should be rounded to two decimal places. All other parameters should be rounded to no more than 3 decimal places. 

**Note:** Some exceptions to this might exsist due to number scaling (e.g., emission rates)

#### Coding Conventions
* Generally, each line in GAMS should be no longer than a standard page width (255 characters)

* Declarations
  * Blocks of declarations are preferred to individual line declarations
  * Comments are required for each declaration
    * Units should always be defined first (even if they are unitless) enclosed in "--"
    * Example: cap_out(i,r,t)         "--MW-- capacity by region"
  * Comments need not be comprehensive
    * CAP(i,v,r,t) "--MW-- capacity by technology i of vintage v in region r in year t"
    * CAP(i,v,r,t) "--MW-- capacity by technology"

* Ordering of indices
  * The following indices should always appear first in the following order: (1)ortype (2)i (3)v (4)r (5)h 
  * The t (year) index should always be last
  * Other sets should generally be ordered alphabetically, respecting the two conventions above

* Qualifiers 
  * Enclosed with brackets “[]”
  * No space between qualifiers
  * example: $[qual1$qual2]
  * Parenthesis should be used to make order of operations explicit
    * Incorrect: $[not qual1 $not qual2]
    * Correct: $[(not qual1)$(not qual2)]
  * Operators “and”, “not”, and “or” should be lower case

* Equations (this applies to pre- and post-processing; model constraints)
  * Each term should begin with a plus (+) or minus (-) sign, even the first term
  * Summations
    * Summation arguments should be bookended with braces “{}” sum{…}
    * The summation will generally be separated into three parts that will appear on three different lines, with the closing } lining up with the opening {
    ```
    [+/-] sum{ ([indices]) $ [qualifiers] ,
                      [parameter] * [variable]
                    }
    ```
    ```
    + sum{(i,c,r,t)$[Qual1$Qual2 … $Qual3], 
          cv_avg(i,r,t) * CAP(i,c,r,t)
        }
    ```
  * For equations, sums should generally be split with terms on multiple lines. In some cases it will be more readable to leave the sum on one line (e.g., a short sum inside of a long sum).
  * Each term of an equation should be separated by a new line; white space should be inserted between terms
  * When reasonable, only one parameter should be multiplied by one variable
    * for example, “heatrate [MBtu/MWh] * emissions rate of fuel [tons CO2/MBtu] * GENERATION [MWh]” should be “emissions rate of plant [tons CO2/MWh] * GENERATION [MWh]”
    * this will help us limit numerical issues that result from the multiplication of two small numbers
  * When multiplying parameters and variables, parameters should appear on the left and variables on the right
  * Keep one space on either end of a mathematical operator (*, /, +, -). example: “curt_marg * GEN” rather than “curt_marg*GEN”

* Do not use recursive calculations; new parameters should be created
  * Example: “load = load * 1.053” should be written as “busbarload = enduseload * 1.053”
  * This will create consistency between the units specified in the parameter declaration and the use of the parameter 

* Comments
  * Do not use inline comments (comments proceeded by //). This helps to make it easier to find comments
  * Do not use $ontext/$offtext except for headers at the beginning of files
  * Do not include a space after the “*” to start a comment
  * Do not use a comment to note an issue.  Use GitHub to put the issue instead.
  * Example: Don’t do this: 
    ```
    *!!!! this will need to be updated to the tophrs designation after the 8760 cv/curt method is implemented   
    ```

* Other
  * GAMS functions such as sum, max, smax, etc. should use {}; Example: avg_outage(i) = sum{h,hours(h)*outage(i,h)} / 8760 ;
  * When including the semicolon on the end of a line there should be a space between the semicolon and the last character of the line (see previous example)
  * When using `/ /` for a parameter declaration, place the closing semicolon on the same line as the final slash: `/ ;`
  * Sums outside of equations (e.g., in e_reports) need not be split over multiple lines if they do not exceed the line limit
  * Do not use hard-coded numbers in equations or calculations. Values should be assigned to an appropriate parameter name that is subsequently used in the code.
  * Large input data tables should be loaded from individual data files for each table, preferably in *.csv format. Large data tables should not be manually written into the code but can be written dynamically by scripts or inserted with a $include statement.
  * Compile-time conditionals should always use a tag (period + tag name) to clearly define the relationships between compile-time conditional statements. Failure to do so hurts readability sometimes leads to compilation errors. Example:
    ``` 
    $ifthen.switch1 Sw_One==A
      Do Something
    $elseif.switch1 Sw_One==B
      Do Something
    $else.switch1 Sw_One==C
      Do Something
    $endif.switch1
    ```


### Input Conventions and Data Handling
#### Input Conventions
* Data read into b_inputs should already be filtered.  E.g., if you are running ERCOT, only data for ERCOT should be included.
  * We did not structure things this way when we first built ReEDS, and it might not be possible to always meet this recommendation without a large amount of work.  This recommendation represents the vision we are working toward rather than a requirement.
  * The same applies to scenarios. If there are multiple scenario options in a single file (e.g. inputs/carbonconstraints/co2_cap.csv), only the single scenario used in a model run should be copied to inputs_case and loaded in b_inputs.gms.

* Input csv files that are written to inputs_case should have the same name as the GAMS parameter that reads that csv file.
  * Example: trancap_init(r,rr,trtype) reads in trancap_init.csv

* Parameters read into b_inputs should also include a header that has the set names and then units for the values.  An asterisk is required to keep GAMS from reading the header and throwing an error.  Example:

  ![image](https://github.nrel.gov/storage/user/284/files/a65d3fc7-99e2-40d2-8d57-bb9bcbab0fcf)
 
* Parameters read into b_inputs should be surrounded by $offlisting and $onlisting so that they are not written to the .lst files.
  * Example:
    ```
    parameter ev_static_demand(r,allh,allt) "--MW-- static electricity load from EV charging by timeslice"
    /
    $offlisting
    $ondelim
    $include inputs_case%ds%ev_static_demand.csv
    $offdelim
    $onlisting
    / ;
    ```

* When a file read into b_inputs was created by an upstream script within the repository, include a note indicating which script created the file.
  * Example: “* Written by hourly_process.py”

* In general, parameter declarations (which are in long format) are preferred to table declarations.  Table declarations are acceptable when the table format can significantly reduce the files size or when the format of the native data better matches the table format.

* Files used as inputs for the repository are always placed in an appropriate location within the “inputs” folder.  Input files are grouped topically.

* When there are multiple input options for a given input, the input file name should be “{file}_{option}”.  For example:
  * battery_ATB_2022_moderate
  * battery_ATB_2022_conservative

* If preprocessing is needed to create the input file that is placed in the ReEDS repository, the preprocessing scripts or workbooks should be included in the ReEDS-2.0_Input_Processing  repository ([https://github.nrel.gov/ReEDS/ReEDS-2.0_Input_Processing](https://github.nrel.gov/ReEDS/ReEDS-2.0_Input_Processing)).  Raw data files should be placed in that repository if their file size permits.  Otherwise, raw data files should be placed in \\nrelnas01\ReEDS\ _ReEDS Documentation.

* Any scripts that preprocess data after a ReEDS run is started should be placed in the input_processing folder.
  * Input processing scripts should start with a block of descriptive comments describing the purpose and methodology, and internal functions should use docstrings and liberal comments on functionality and assumptions.

* Any costs read into b_inputs should already be in 2004$.  Cost adjustments in preprocessing scripts should rely on the deflator.csv file rather than have hard-coded conversions.

* In general, if inputs require calculations before they are ingested into b_inputs, those calculations should be done in Python rather than in GAMS. GAMS can be used for calculations where the GAMS syntax simplifies the calculation or where upstream dependencies make it challenging for the calculations to happen in Python preprocessing scripts.

* In Python, file paths should be added using os.path.join() rather than writing out the filepath with slashes.

* Data column headers should use the ReEDS set names when practical.  For example, data that include regions should use “r” for the column name rather than “ba,” “reeds_ba,” or “region.”

* Preprocessing scripts in input_processing should not change the working directory or use relative filepaths; absolute filepaths should be used wherever possible.

#### Input Data
* In general, all inputs less than ~10 MB should be in .csv format.
  * If the csv file would be larger than ~10 MB, then write it as a h5 file unless accessibility is especially important (e.g., the ReEDS_generator_database file needs to be easily accessible, so is kept as a csv file).  
  * In some cases .txt files may be used as inputs if their format is especially convenient for the application.
* Input files should be included in the repository when possible. 
  * Files too large to include in the repository or unnecessary for the repository (e.g., files used only for special circumstances, such as individual sites for wind and solar) should be included in the appropriate folder on nrelnas and can be copied to the local repository in the preprocessing steps.
  * Files stored on nrelnas should have unique names that identify the version of the file and data.  For example, you would use “special_input_data_2022_11_28” rather than “special_input_data.”

* Add units to raw data files
  * When adding a new raw data file, include units in the column name to avoid confusion
  * As an example, look at '/inputs/plant_characteristics/conv_ATB_2023.csv'
    * The data in the "capcost" column are in unit of k$/MW or $/kW, although the units are not labeled
    * As a best practice, "capcost" should be named "capcost_usd.per.kw" to make units clear

* Add comments to raw data files that represent GAMS subsets
  * When adding a new raw data file that represents a GAMS subset, include column headers representing the GAMS set that each column's entries belong to, with the first column header being prepended by an asterisk (this allows GAMS to parse the first row of the .csv file as a comment)
  * For an example, see '/inputs/sets/fuel2tech.csv' 

## Version Control and Testing
### ReEDS-2.0 Releases

### Pull Request Best Practices
To ensure a smooth process and maintain quality of the ReEDS model, the following are best practices that should be followed when creating a pull request:
* Prior to creating a pull request, perform the appropriate level of testing on your branch
  * The Full U.S. test (in cases.csv) will be used in most cases
  * For more information on testing, see the [Testing Guidlines section](#testing-guidelines)

* Ensure the title of your pull request is both descriptive and concise
  * This is crucial, as the title of your pull request will be used in the summary of changes for each new version of ReEDS

* Fill out the pull request template in detail
  * The description should be clear enough for someone not directly involved in your work to grasp the changes being proposed
  * Assign and contact reviewers
    * Best practice is to have 2 reviewers from the ReEDS team

* Keep your pull request in draft mode until it is ready to be merged into the main branch, indicating to reviewers that it is still a work in progresss

* Create smaller pull requests more frequently when possible
  * This helps avoid merge conflicts and simplifies the review process, making it more manageable for reviewers

* After creating the pull request, monitor the status of the automated tests
  * This runs the R2X test automatically

* Prior to merging your pull request, make sure to update the relevant documentation to reflect your changes. There are two places that should be updated (more information on this can be found in the [documentation guidelines](#documentation-guidelines)):
  1. Sources_documentation
  2. The 'docs/' folder within the repository

### Resolving Merge Conflicts
Sometimes you might run into merge conflicts when trying to merge your branch into another branch. Merge conflicts happen when there are competing commits that Git needs you to help decide which changes should be kept in the final merge.

Merge conflicts must be resolved prior to merging a pull request and there are different ways to handle merge conflicts: 
  * Simple merge conflicts can be resolved on GitHub. To learn more about how to do this, refer to GitHub's documentation on [Resolving merge conflicts on GitHub](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github)

  * Larger or more complex merge conflicts will need to be resolved using the command line and a text editor (e.g., VSCode). To learn more about how to do this, refer to GitHub's documentation on [Resolving merge conflicts using the command line](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line)

### ReEDS Versioning & Releases
This section outlines the current ReEDS approach to versioning. You can find current and past ReEDS versions here: {{ '[ReEDS-2.0 Releases]({}/releases)'.format(base_github_url) }}

#### Versioning overview

GitHub Releases are used to create ReEDS versions on a monthly cadence after a suite of tests are performed. More on ReEDS testing can be found [here](./Testing). More information on GitHub Releases can be found in the [GitHub Doc](https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases). 

Releases are based on Git tags, and the proposed versioning scheme is `EPOCH.MONTHLYINCREMENT.PATCH`. The components are: 
- `EPOCH`: The current year, this will be incremented in January of each year (e.g., 2023)
- `MONTHLYINCREMENT`: Restarts from 0 when EPOCH is increased, then increased by 1 each month when the newest version is created
- `PATCH`: Typically will just be 0, but could increment if an important update or bug fix needs to be merged in prior to the next monthly release. 

#### Tagging versions

Tagging with GitHub releases is not done manually with each pull request. After a new release has been created, a tag will be generated. 

How to use tags:
- You can check them out like any other commit: `git checkout tags/2023.1.0`
  - You may need to fetch tags to your machine first: `git fetch --tags`
  - If you plan to develop from an older tag (i.e., you’re not checking out main on the most recent tag and you plan to commit new changes), you’ll also want to specify a branch or create a new one: `git checkout -b <new branch name> <tag name>`
- ReEDS2X tool versions should reference the last ReEDS version they're known to work for in their tag text or README
  - Each ReEDS run produces a meta.csv file with information on the branch, commit, and version of that run which can be used to determine the vintage of any given ReEDS run.
- If you're using ReEDS2X for a side project and would like to tag versions for them to refer to, the suggested format is: `EPOCH.MONTHLYINCREMENT.PATCH.PROJECTNAME`, where `EPOCH.MONTHLYINCREMENT.PATCH` refers to the last version of main that has been merged into your project branch.
  -	The same format can be used to tag specific versions of the model that are used for published analyses that are not merged into main, e.g. 2023.4.0.hybrids.
  -	In general, please add custom components to the tail of the version number instead of the beginning to keep them easy to sort.


### Testing Guidelines
This section outlines the recommended testing that should be performed on ReEDS prior to creating a pull request or a new version. 

#### Post-process Test
**This testing should be performed when a change is made that does not change model code or data that might impact model outputs. Ex: changing the color styles in bokeh output plot, or adjusting a post-processing script such as runstatus.py**

1. Ensure the post-processing capabilities operate correctly on outputs from the most recent version of main
   - A demonstration of this should be included in the pull request
2. Verify that R2X pytest passes

#### Light Test (Pacific Region)
**This testing should be performed for changes to model code that are not expected to have any meaningful impact on the model solution. Examples include:**

* **Rounding an input parameter**

* **Changing the name of a column or model parameter**

* **Updating code within an if statement where the if statement does not apply under default settings (e.g., "if int(sw.GSw_calc_powfrac):" where the default value of sw.GSw_calc_powfrac is 0)**

* **Adding a missing entry to run files.csv**

1. Do a comparison run of the default test case (cases_test.csv) against a test run from main and produce a comparison report. 
   - The report should be examined for any unexpected outputs and included in the pull request for review
2. Verify that R2X pytest passes

#### Regular Test (Full U.S.)
**This testing should be performed for all other cases not covered by the post-process or light test**

1. Do a comparison run of the default case (cases.csv) against a run from main and produce a comparison report. 
   - You should be able to reasonably explain changes in capacity, generation, transmission capacity, bulk system electricity price, system cost, and runtime
   - The report should be included in the pull request 
2. Verify that R2X pytest passes

#### New Version Test
**This testing is required for a new tagged and released version**

1. Checks to perform: 
  * Cases.csv scenario can be run on the HPC, Yampa, Mac, and Windows
  * There are no errors in output processing scripts, including: 
    * retail_rate_calculation.py
    * health_damage_calculations.py
    * reeds_to_rev.py
    * transmission_maps.py
    * HTML reports
  * R2X pytest passes

2. The cases in cases_test.csv should all be run. All scenarios except those listed below need to complete successfully.  If any of the cases below are not successful, they should be noted in the release notes.

  * Pacific test case with water constraints
  * Pacific test case with PVB turned on 
  * Pacific test case with detailed CO2 transport & storage 
  * Pacific test case with representatives weks
  * Pacific test case with full chronological year

3. All cases output HTMLs should be reviewed to ensure they look reasonable. 

4. Create a comparison report of the national scenario and the national 100% decarb scenario for the model version update summary (these should be attached to the Release)


## Documentation Guidelines
When making changes to ReEDS, you should generate and update the sources.csv and sources_documentation.md files before merging. 

```{include} ../documentation_tools/README.md
```

### Updating the ReEDS Documentation
Additionally, the general ReEDS documentation lives in the "docs/source" folder within the repo. Depending on the changes you're making to the model, please update the documentation here accordingly. 

To edit the ReEDS documentation: 
1. Find the markdown file you would like to modify under the "docs/source" folder
2. Make any necessary changes and save the file
3. Commit and push your changes as you normally would. 
   * **When your pull request gets merged into main, there is a github action that will automatically recompile the documentation with your changes and publish the updated site.**

If you would like to see what the documentation will look like when developing locally, you can do that with the following process: 
1. Navigate to the "docs/" folder 

2. Run the command `make html` to build the documentation locally
   * Ensure you have the 'reeds2' environment activated
  
3. From Finder/File Explorer, open the folder "/ReEDS-2.0/docs/build/html" then click on "index.html"
   * This will launch the documentation in a new internet window
   * If you make changes and wish to see how they are reflected in the documentation, you can run the `make html` command again and refresh the window you already have open

4. If you would like to remove the generated files, you can run the command `make clean` from the "docs/" folder
