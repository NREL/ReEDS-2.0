*==========================
* --- Global sets ---
*==========================

*Setting the default slash
$setglobal ds \
$setglobal copycom copy

*Change the default slash if in UNIX
$ifthen.unix %system.filesys% == UNIX
$setglobal ds /
$setglobal copycom cp
$endif.unix

*========================================
* -- Variable Declaration --
*========================================

positive variables

*load variable - set equal to lmnt 
  LOAD(r,h,t)

* capacity and investment variables
  CAP(i,c,r,t)                   "--MW-- generation capacity"
  INV(i,c,r,t)                   "--MW-- generation capacity investment"
  INV_RSC(i,c,r,t,rscbin)        "--MW-- investment in technologies computed on a renewable supply curve"
  INVREFURB(i,r,t)               "--MW-- investment in refurbishments of technologies computed on a renewable supply curve"

* generation and storage variables
  GEN(i,c,r,h,t)            "--MW-h-- electricity generation"
  CURT(r,h,t)               "--MW-h-- Curtailed energy"
  STORAGE_IN(i,c,r,h,t)     "--MW-h-- storage entering in hour h"
  STORAGE_OUT(i,c,r,h,t)    "--MW-h-- storage released in hour h"
  MINGEN(r,szn,t)           "--MW-- seasonal minimum generation level in region r"
  SLACK_FUEL(t) 			      "--GJ -- slack variable for naptha use in gas cc plants"

*trade variables
  FLOW(r,rr,h,t,trtype)          "--MW-h-- electricity flow"
  OPRES_FLOW(ortype,r,rr,h,t)    "--MW-- interregional trade of operating reserves by operating reserve type"
  PRMTRADE(r,rr,szn,t)           "--MW-- planning reserve margin capacity traded from r to rr"

*operating reserve variables
  OPRES(ortype,i,c,r,h,t)        "--MW-- operating reserves by type"

*emission variables
  EMIT(r,t)                      "--metric tons co2-- total emissions in a region"

* transmission variables
  CAPTRAN(r,rr,trtype,t)         "--MW-- capacity of transmission"
  INVTRAN(r,rr,t,trtype)         "--MW-- investment in transmission capacity"
  INVSUBSTATION(r,vc,t)          "--MW-- substation investment--"
;


*========================================
* -- Equation Declaration --
*========================================

EQUATION

* objective function calculation
 eq_ObjFn_Supply                      "--INR-- Objective function calculation"

*load constraint 
 eq_loadcon(r,h,t)

* main capacity constraints
 eq_cap_init_noret(i,c,r,t)				 "--MW-- Existing capacity that cannot be retired is equal to exogenously-specified amount (eq_cap_mo_exist_noretire)"
 eq_cap_init_retub(i,c,r,t)		     "--MW-- Existing capacity that can be retired is less than or equal to exogenously-specified amount (eq_cap_exist_retire_ub)"
 eq_cap_init_retmo(i,c,r,t)				 "--MW-- Once retired, existing cap stock cannot be built up again"
 eq_cap_mo_new_noret(i,c,r,t)      "--MW-- New capacity equals investments + refurbishments when retirements are not possible"
 eq_cap_new_retub(i,c,r,t)         "--MW-- New capacity cannot exceed INV + refurb when retirements are possible"
 eq_cap_new_retmo(i,c,r,t)         "--MW-- Once retired, new cap of each class cannot be built up again"
  
* other capacity constraints
 eq_rsc_inv_account(i,c,r,t)       "--MW-- total rsc investments in each resource region equal sum of inv_rsc across all resource bins in that region"
 eq_rsc_INVlim(r,i,rscbin)         "--MW-- total investment from each rsc bin cannot exceed the available investment"
 eq_refurblim(i,r,t)               "--MW-- total refurbishments cannot exceed the refurbishments available computed as the expired investments in capital"
 eq_growthlimit_relative(i,t)      "--MW-- relative growth limit on technologies in growlim(i)"
 eq_growthlimit_absolute(r,tg,t)   "--MW-- absolute growth limit on technologies in growlim(i)"
 eq_tech_phase_out(i,c,r,t)        "--MW-- mandated phase out of select technologies"
 eq_prescribedre_pre2023(i,r,t)     "--MW-- unprescribed economic RE investments are not allowed before 2023"
 eq_re_diversity(i,r,t)            "--MW-- No single resource region can have more than 15% of total national capacity (applies to WIND and UPV)"

* operation and reliability
 eq_supply_demand_balance(r,h,t)         "--MWh-- supply demand balance"
 eq_dhyd_dispatch(i,c,r,szn,t)           "--MWh-- dispatchable hydro seasonal constraint"
 eq_capacity_limit(i,c,r,h,t)            "--MWh-- generation limit for new capacity"
 eq_reserve_margin(region,szn,t)         "--MW--  planning reserve margin requirement"
 eq_transmission_limit(r,rr,h,t,trtype)  "--MWh-- transmission limit"
 eq_minloading(i,c,r,h,hh,t)             "--MWh-- minimum loading across same-season hours"
 eq_fuelsupply_limit(tf,t)               "--GJ-- limit on amount of fuel available per year"
 eq_minszngen(i,c,r,szn,sznszn,t)        "--MWh -- gas CC technologies need to be on every season"

* rsc policy constraints
 eq_rsc_min_generation(t)                 "--fraction-- minimum generation fraction from rsc sources"
 eq_rsc_min_capacity(t)                   "--MW-- minimum capacity from prescribed rsc sources"

* operating reserve constraints
 eq_OpRes_requirement(ortype,h,t)         "--MW-- operating reserve constraint"
 eq_ORCap(ortype,i,c,r,h,t)               "--MW-- operating reserve capacity availability constraint"

* regional and national pollution polivecies
 eq_co2_accounting(r,t)                   "--metric tons co2-- accounting for total CO2 emissions in a region"
 eq_co2_rate_limit(r,t)                   "--metric tons CO2 per mwh-- emission rate limit"
 eq_co2_mass_limit(t)                     "--metric tons CO2-- aggregate emission limit"

* transmission equations
 eq_CAPTRANEq(r,rr,trtype,t)                 "--MW-- capacity accounting for transmission"
 eq_INVTRAN_VCLimit(r,vc)                    "--MW-- investment in transmission capacity cannot exceed that available in its VC bin"
 eq_PRMTRADELimit(r,rr,szn,t)                "--MW-- trading of PRM capacity cannot exceed the line's capacity"
 eq_SubStationAccounting(r,t)                "--Substations-- accounting for total investment in each substation"

* storage-specific equations
 eq_storage_capacity(i,c,r,h,t)           "--MWh-- Second storage capacity constraint in addition to eq_capacity_limit"
 eq_storage_balance(szn,i,c,r,t)          "--MWh-- STORAGE_IN must equal storage_out for a season"
 eq_storage_batteryduration(szn,i,c,r,t)  "--MWh-- limit STORAGE_IN based on hours of battery storage available"

* curtailment equations
 eq_curt_gen_balance(r,h,t)              "--MW-- generation plus reserves cannot exceed max possible generation minus curtailment"
 eq_curtailment(r,h,t)                   "--MW-- curtailment equals avg curt + marg curt for new investments + curt from existing VREs + changes in curt due to min gen - reductions due to storage"
 eq_mingen_lb(r,h,szn,t)                 "--MW-- min gen in each season cannot be lower than min generation level (GEN times minload) in any time slice in that season"
 eq_mingen_ub(r,h,szn,t)                 "--MW-- generation in each time slice in that season must exceed the mingen level for that season"
;


*=========================
* --- LOAD CONSTRAINT ---
*=========================

*the marginal of of this constraint allows you to
*determine the full price of electricity load
*i.e. the price of load with consideration to operating
*reserve and planning reserve margin considered
eq_loadcon(r,h,t)$[rfeas(r)$tmodel(t)]..
  LOAD(r,h,t) =e= lmnt(r,h,t)
  ;


*==========================================
* --- EQUATIONS TO TRACK TOTAL CAPACITY OVER TIME ---
*==========================================

 
*====================================
*existing capacity equations
*====================================

* Existing capacity that cannot be retire is equal to the exogenously specified amount
eq_cap_init_noret(i,c,r,t)$[valcap(i,c,r,t)$tmodel(t)$existc(c)
                                  $((not retiretech(i,c,r,t)) or (yeart(t)<retireyear))]..

    m_capacity_exog(i,c,r,t)

    =e=

    CAP(i,c,r,t)
    ;

* For existing technologies that can be retired,
* the exogenously specified capacity is the upper bound on how much can exist
eq_cap_init_retub(i,c,r,t)$[valcap(i,c,r,t)$tmodel(t)$existc(c)
                                $(retiretech(i,c,r,t) and (yeart(t)>=retireyear))]..

    m_capacity_exog(i,c,r,t)

    =g=

    CAP(i,c,r,t) 
    ;

* Once retired, existing capacity cannot be built up again
eq_cap_init_retmo(i,c,r,t)$[valcap(i,c,r,t)$tmodel(t)$existc(c)
                            $(retiretech(i,c,r,t) and (yeart(t)>=retireyear))]..

    sum{tt$[tprev(t,tt)$valcap(i,c,r,tt)],CAP(i,c,r,tt)}

    =g=

    CAP(i,c,r,t) 
    ;

* Policy-driven mandatory phase of specified technologies by specific dates
eq_tech_phase_out(i,c,r,t)$[tmodel(t)$rfeas(r)$valcap(i,c,r,t)$phase_out_tech(i)$(yeart(t)>=phase_out_year(i))$Sw_TechPhaseOut]..
    CAP(i,c,r,t) + INV(i,c,r,t)

    =e=

    0
;


*====================================
*new capacity equations
*====================================

*  New capacity equals investments + refurbishments when retirements are not possible
eq_cap_mo_new_noret(i,c,r,t)$[valcap(i,c,r,t)$tmodel(t)$newc(c)
                                  $((not retiretech(i,c,r,t)) or (yeart(t)<retireyear))]..

    + sum{tt$[inv_cond(i,c,t,tt)$(tmodel(tt) or tfix(tt))
             $(yeart(tt)<=yeart(t))$valcap(i,c,r,tt)],
          INV(i,c,r,tt) }

    + sum{tt$[ict(i,c,tt)$(tmodel(tt) or tfix(tt))
             $(yeart(tt)<=yeart(t))$(yeart(t)-yeart(tt)<maxage(i))],
        INVREFURB(i,r,tt) }$[refurbtech(i)$Sw_Refurb]

    =e=

    CAP(i,c,r,t)
    ;


* New capacity cannot exceed INV + refurb when retirements are possible
eq_cap_new_retub(i,c,r,t)$[valcap(i,c,r,t)$tmodel(t)$newc(c)
                                $(retiretech(i,c,r,t) and (yeart(t)>=retireyear))]..

    + sum{tt$[inv_cond(i,c,t,tt)$(tmodel(tt) or tfix(tt))
             $(yeart(tt)<=yeart(t))$valcap(i,c,r,tt)],
              INV(i,c,r,tt) }$[newc(c)]

    + sum{tt$[ict(i,c,tt)$(tmodel(tt) or tfix(tt))$
             (yeart(tt)<=yeart(t))$(yeart(t)-yeart(tt)<maxage(i))],
              INVREFURB(i,r,tt) }$[refurbtech(i)$Sw_Refurb]

    =g=

    CAP(i,c,r,t)
    ;


* Once retired, new cap of each class cannot be built up again
eq_cap_new_retmo(i,c,r,t)$[valcap(i,c,r,t)$tmodel(t)$newc(c)
                                    $(retiretech(i,c,r,t) and (yeart(t)>=retireyear))]..

    sum{tt$[tprev(t,tt)$valcap(i,c,r,tt)], CAP(i,c,r,tt)}
    + INV(i,c,r,t)$inv_cond(i,c,t,t)
    + INVREFURB(i,r,t)$ict(i,c,t)

    =g=

    CAP(i,c,r,t) 
    ;


* Prior to 2023, all additions are prescribed. 
* Wind and solar additions with known locations are included in m_capacity_exog
* When locations are not knows, the prescribed capacity is added through INV_RSC and ReEDS selects the location 
eq_prescribedre_pre2023(i,r,t)$[rfeas(r)$tmodel(t)$required_prescriptions(i,r,t)$(yeart(t) < 2023)
                             $prescriptivetech(i)$Sw_Prescribed]..

* investments in prescribed capacity that correlates to the general category in each BA
    sum{(rs,c,tt)$[inv_cond(i,c,t,tt)$(tmodel(tt) or tfix(tt))$(yeart(tt)<=yeart(t))],
      m_capacity_exog(i,c,rs,tt)$[(yeart(t)-yeart(tt)<maxage(i))$r_rs(r,rs)] }
     
  + sum{(rs,c,tt,rscbin)$[inv_cond(i,c,t,tt)$(tmodel(tt) or tfix(tt))$(yeart(tt)<=yeart(t))],
      INV_RSC(i,c,rs,tt,rscbin)$[(yeart(t)-yeart(tt)<maxage(i))$r_rs(r,rs)$m_rscfeas(rs,i,rscbin)] } 

        =e=

*must equal the prescribed amount
    m_required_prescriptions(i,r,t) 
;


*here we limit the amount of refurbishments available in specific year
*this is the sum of all previous year's investment that is now beyond the age
*limit (i.e. it has exited service) plus the amount of retired exogenous capacity
*that we begin with
eq_refurblim(i,r,t)$[rfeas_cap(r)$tmodel(t)$refurbtech(i)$Sw_Refurb]..
*investments that meet the refurbishment requirement (i.e. they've expired)
    sum{(cc,tt)$[m_refurb_cond(i,cc,r,t,tt)$newc(cc)
                $(tmodel(tt) or tfix(tt))$valcap(i,cc,r,tt)],
         INV(i,cc,r,tt) }

*[plus] exogenous decay in capacity
*note here that the tfix or tmodel set does not apply
*since we'd want capital that expires in off-years to
*be included in this calculation as well
    + sum{(c,tt)$[yeart(tt)<=yeart(t)],
         m_avail_retire_exog_rsc(i,c,r,tt) }

    =g=

*must exceed the total sum of investments in refurbishments
*that have yet to expire - implying an investment can be refurbished more than once
*if the first refurbishment has exceed its age limit
    sum{tt$[(yeart(tt)<=yeart(t))$(tmodel(tt) or tfix(tt))$(yeart(t)-yeart(tt)<maxage(i))],
         INVREFURB(i,r,tt) }
;


*aggregate wind and solar investments across all resource bins
eq_rsc_inv_account(i,c,r,t)$[tmodel(t)$valcap(i,c,r,t)$rsc_i(i)$newc(c)]..

  sum{rscbin$m_rscfeas(r,i,rscbin),INV_RSC(i,c,r,t,rscbin) }

  =e=
  INV(i,c,r,t)
  ;


*note that the following equation only restricts inv_rsc and not inv_refurb
*therefore, the capacity indicated by teh supply curve may be limiting
*but the plant can still be refurbished
eq_rsc_INVlim(r,i,rscbin)$[rsc_i(i)$rfeas_cap(r)$m_rscfeas(r,i,rscbin)]..

*capacity indicated by the resource supply curve
    m_rsc_dat(r,i,rscbin,"cap")

    =g=

*must exceed the amount of total investment from that supply curve
sum{(ii,c,tt)$[newc(c)$valcap(ii,c,r,tt)$(tmodel(tt) or tfix(tt))$(rsc_agg(i,ii))],
         INV_RSC(ii,c,r,tt,rscbin) * resourcescalar(ii)}
         ;


*limit on year-on-year technology growth rate to avoid unrealistic investment growth
eq_growthlimit_relative(i,t)$[growth_limit_relative(i)$tmodel(t)$Sw_GrowthRel$(yeart(t)>2022)$(not storage(i))]..

*the relative growth rate multiplied by the existing technology group's existing capacity
     sum{(c,r,tt)$[tprev(t,tt)$valcap(i,c,r,tt)$rfeas_cap(r)$tmodel(tt)],
          CAP(i,c,r,tt)*(1+growth_limit_relative(i))**((yeart(t)-yeart(tt))) }

    =g=

* must exceed the current periods investment - note the inv_cond t,t still functions
* as it should but is analagous to its previous usage when summing over PREVIOUS years
* note scarcely-used set 'tg' is technology group (allows for lumping together or all wind/solar techs)
    sum{(c,r)$[valcap(i,c,r,t)$rfeas_cap(r)],
        CAP(i,c,r,t)}
;


*for some technologies and region, maximum amount of capacity that can be developed based on policy/environmental/resource constraints
eq_growthlimit_absolute(r,tg,t)$[growth_limit_absolute(r,tg)$Sw_GrowthAbs]..

* the absolute limit of growth (in MW)
     growth_limit_absolute(r,tg)

     =g=

* must exceed the total capacity - same RHS as previous equation
* note scarcely-used set 'tg' is technology group (allows for lumping together or all wind/solar techs)
     sum{(i,c)$tg_i(tg,i),
         CAP(i,c,r,t)}
;


eq_rsc_min_generation(t)$[tmodel(t)$Sw_REGenMandate]..

    sum{(ii,c,r,h)$[prescribed_rsc_set(ii)$rfeas(r)$tmodel(t)$valgen(ii,c,r,t)],
        GEN(ii,c,r,h,t)}

        =g=

    sum{(ii,c,r,h)$[rfeas(r)$tmodel(t)$valgen(ii,c,r,t)],
        GEN(ii,c,r,h,t)}*rsc_min_gen(t)
;


eq_rsc_min_capacity(t)$[tmodel(t)$Sw_RECapMandate]..

    sum{(i,c,r)$[prescribed_rsc_set(i)$rfeas(r)$tmodel(t)$valcap(i,c,r,t)$rs(r)],
        CAP(i,c,r,t)}

        =g=

    rsc_min_cap(t)
;


*capacity must be greater than supply
*note this does not apply to both storage and dispatchable hydro
*dispatchable hydro is accounted for in the eq_dhyd_dispatch
eq_capacity_limit(i,c,r,h,t)$[tmodel(t)$rfeas(r)$valgen(i,c,r,t)$(not storage(i))$(not hydro_d(i))]..

*total amount of dispatchable capacity
    outage(i,h) * sum{rr$cap_agg(r,rr),
                      CAP(i,c,rr,t)$[valcap(i,c,rr,t)$(not cf_tech(i))]}

*sum of non-dispatchable capacity multiplied by its rated capacity factor,
*only vre technologies are curtailable
    + sum{rr$[cap_agg(r,rr)$rfeas_cap(rr)$valcap(i,c,rr,t)$cf_tech(i)],
          (m_cf(i,rr,h)
           * CAP(i,c,rr,t))}

    =g=

*must exceed generation
    GEN(i,c,r,h,t)

*[plus] sum of operating reserves by type
    + sum{ortype$reserve_frac(i,ortype),
         OPRES(ortype,i,c,r,h,t) }$Sw_OpRes
;


eq_curt_gen_balance(r,h,t)$[tmodel(t)$rfeas(r)]..

*total potential generation
    sum{(i,c,rr)$[cap_agg(r,rr)$valcap(i,c,rr,t)$rfeas_cap(rr)$vre(i)],
         m_cf(i,rr,h) * CAP(i,c,rr,t) }

*[minus] curtailed generation
    - CURT(r,h,t)

    =g=

*must exceed realized generation
    sum{(i,c)$[valgen(i,c,r,t)$vre(i)],GEN(i,c,r,h,t)}

*[plus] sum of operating reserves by type
    + sum{(ortype,i,c)$[reserve_frac(i,ortype)$valgen(i,c,r,t)$vre(i)],
         OPRES(ortype,i,c,r,h,t) }$Sw_OpRes
;


*VRE curtailment equals curtailment calculated from the last iteration plus changes due to 
*redispatching the thermal fleet, investments in storage, and investments in VRE
eq_curtailment(r,h,t)$[tmodel(t)$rfeas(r)]..

*curtailment
    CURT(r,h,t)

    =g=

*must the average curtailment of VRE
*This section only applies in the intertemporal solves (otherwise curt_avg = 0)
    curt_avg(r,h,t)
      * sum{(i,c,rr)$[cap_agg(r,rr)$valcap(i,c,rr,t)$rfeas_cap(rr)$vre(i)],
        m_cf(i,rr,h) * CAP(i,c,rr,t) }

*[plus] the marginal curtailmet of new VRE
*This section only applies in the sequential solves (otherwise curt_marg and curt_old are zero)
*curt_marg is at the rsc level and ba level, while curt_old is only at the ba level
    + sum{(i,c,rr)$[cap_agg(r,rr)$valcap(i,c,rr,t)$rfeas_cap(rr)$vre(i)$inv_cond(i,c,t,t)],
      m_cf(i,rr,h) * curt_marg(i,rr,h,t)
      * INV(i,c,rr,t) }

*[plus] the curtailment from existing VRE
    + surpold(r,h,t)

*[plus] curtailment due to changes in minimum generation levels
    + curt_mingen(r,h,t) * sum{h_szn(h,szn),MINGEN(r,szn,t) - sum{tt$tprev(t,tt),MINGEN(r,szn,tt)}  }$Sw_MinGen

*[minus] curtailment reduction from charging storge during timeslices with curtailment
    - sum{(i,c)$[valgen(i,c,r,t)$storage(i)],curt_storage(i,r,h,t) * STORAGE_IN(i,c,r,h,t)}
;


eq_mingen_lb(r,h,szn,t)$[h_szn(h,szn)$rfeas(r)$tmodel(t)$Sw_MinGen]..

*minimum generation level in a season
    MINGEN(r,szn,t)

    =g=

*must be greater than the minimum generation level in each time slice in that season
    sum{(i,c)$[valgen(i,c,r,t)$minloadfrac(r,i,h)$(not storage(i))],GEN(i,c,r,h,t)  * minloadfrac(r,i,h) }
;


eq_mingen_ub(r,h,szn,t)$[h_szn(h,szn)$rfeas(r)$tmodel(t)$Sw_MinGen]..

*generation in each timeslice in a season
    sum{(i,c)$[valgen(i,c,r,t)$minloadfrac(r,i,h)$(not storage(i))],GEN(i,c,r,h,t)  }

    =g=

*must be greater than the minimum generation level
    MINGEN(r,szn,t)
;


eq_dhyd_dispatch(i,c,r,szn,t)$[rfeas(r)$tmodel(t)$hydro_d(i)$valgen(i,c,r,t)]..

*seasonal hours [times] seasonal capacity factor adjustment [times] total hydro capacity
    sum{h$[h_szn(h,szn)],hours(h) }

*following parameter c♦ould be wrapped into one...
    * cf_adj_hyd(i,szn,r)
    * CAP(i,c,r,t)

    =g=

*total seasonal generation
    sum{h$[h_szn(h,szn)], hours(h)
        * ( GEN(i,c,r,h,t)
              + sum{ortype$reserve_frac(i,ortype), OPRES(ortype,i,c,r,h,t) }$Sw_OpRes )
       }
;


*===============================
* --- SUPPLY DEMAND BALANCE ---
*===============================

eq_supply_demand_balance(r,h,t)$[rfeas(r)$tmodel(t)]..

* generation
    sum{(i,c)$[(not storage(i))$valgen(i,c,r,t)],GEN(i,c,r,h,t) }

* [plus] net transmission with imports reduced by losses
    + sum{(trtype,rr)$[rfeas(rr)$routes(rr,r,trtype,t)], (1-tranloss(rr,r)) * FLOW(rr,r,h,t,trtype) }
    - sum{(trtype,rr)$[rfeas(rr)$routes(r,rr,trtype,t)], FLOW(r,rr,h,t,trtype) }

* [plus] net storage
    + sum{(i,c)$[Sw_Storage$valgen(i,c,r,t)$storage(i)],STORAGE_OUT(i,c,r,h,t) }
    - sum{(i,c)$[Sw_Storage$valgen(i,c,r,t)$storage(i)],STORAGE_IN(i,c,r,h,t) }

    =e=

* must exceed demand
    LOAD(r,h,t)
;


*=======================================
* --- MINIMUM LOADING CONSTRAINTS ---
*=======================================

* the generation in any hour cannot exceed the minloadfrac times the
* supply from other hours within that hour correlation set (via hour_szn_group(h,hh))
* note that hour_szn_group does not include the same hour (i.e. h!=hh)
eq_minloading(i,c,r,h,hh,t)$[valgen(i,c,r,t)$minloadfrac(r,i,hh)
                            $tmodel(t)$rfeas(r)$hour_szn_group(h,hh)$Sw_MinGen$(not storage(i))]..

    GEN(i,c,r,h,t)

    =g=

    GEN(i,c,r,hh,t) * minloadfrac(r,i,hh)
;


* gas CC plants must generate something each season. 
eq_minszngen(i,c,r,szn,sznszn,t)$[valgen(i,c,r,t)$GAS(i)
                            $tmodel(t)$rfeas(r)]..

    sum{h$h_szn(h,szn), GEN(i,c,r,h,t) }

    =g=

    sum{h$h_szn(h,sznszn), GEN(i,c,r,h,t)*minloadfrac(r,i,h) }
;


*=========================
* --- Fuel Supply Limit ---
*=========================

* total fuel consumed each year across all states cannot exceed the max availble fuel
eq_fuelsupply_limit(tf,t)$Sw_FuelSupply..

     fuel_limit(tf,t) + SLACK_FUEL(t)

      =g=

      sum{(i,c,r,h)$[rfeas(r)$valgen(i,c,r,t)$heat_rate(i,c,r,t)$tf_i(tf,i) ],
      hours(h) * heat_rate(i,c,r,t) * GEN(i,c,r,h,t) }*1e-6 
      ;


*============================
* --- STORAGE CONSTRAINTS ---
*============================

*storage use cannot exceed capacity
eq_storage_capacity(i,c,r,h,t)$[valgen(i,c,r,t)$Storage(i)$tmodel(t)$Sw_Storage]..

    CAP(i,c,r,t) * outage(i,h)

    =g=

    STORAGE_OUT(i,c,r,h,t) + STORAGE_IN(i,c,r,h,t) 

    + sum{ortype,OPRES(ortype,i,c,r,h,t) }
;


*storage out and operating reserve must be less than storage in minus losses
eq_storage_balance(szn,i,c,r,t)$[valgen(i,c,r,t)$Storage(i)$tmodel(t)$Sw_Storage]..  

    storage_eff(i) * sum{h$h_szn(h,szn),hours(h) * STORAGE_IN(i,c,r,h,t) }

    =e=

    sum{h$h_szn(h,szn), hours(h) * (
         STORAGE_OUT(i,c,r,h,t) + sum{ortype, OPRES(ortype,i,c,r,h,t) }
         ) } 
;


*batteries are limited by their duration for each normalized hour per season
eq_storage_batteryduration(szn,i,c,r,t)$[valcap(i,c,r,t)$Battery_storage(i)
                                         $tmodel(t)$Sw_Storage]..

    battery_duration * CAP(i,c,r,t)

    =g=

    sum{h$h_szn(h,szn),STORAGE_IN(i,c,r,h,t)*hours(h)/numdays(szn) }
;


*=======================================
* --- OPERATING RESERVE CONSTRAINTS ---
*=======================================


eq_ORCap(ortype,i,c,r,h,t)$[tmodel(t)$rfeas(r)$valgen(i,c,r,t)$Sw_OpRes
                            $reserve_frac(i,ortype)$(not storage(i))$(not hydro_nd(i))]..

*the ramplimit times..
    reserve_frac(i,ortype) * (

* the amount of committed capacity available for a season is assumed to be the amount
* of generation from the timeslice that has the highest demand 
         sum{(szn,hh)$[h_szn(h,szn)$maxload_szn(r,hh,t,szn)],
              GEN(i,c,r,hh,t)  }
              )

    =g=

    OPRES(ortype,i,c,r,h,t)
;


*operating reserves must meet the operating reserves requirement (by ortype)
eq_OpRes_requirement(ortype,h,t)$[tmodel(t)$Sw_OpRes]..

*operating reserves from technologies that can produce them (i.e. those w/ramp rates)
    sum{(i,c,r)$[valgen(i,c,r,t)$rfeas(r)$(reserve_frac(i,ortype) or hydro_d(i))$(not hydro_nd(i))],
         OPRES(ortype,i,c,r,h,t) }

*[plus] net transmission of operating reserves (while including losses for imports)
    + sum{(rr,r),(1-tranloss(rr,r))*OPRES_FLOW(ortype,rr,r,h,t) }$Sw_OpResTrade
    - sum{(r,rr),OPRES_FLOW(ortype,r,rr,h,t) }$Sw_OpResTrade

    =g=

*must meet the demand for or type
*first portion is from load
    sum{r$rfeas(r),orperc(ortype,"or_load") * LOAD(r,h,t)}
;


*=================================
* --- PLANNING RESERVE MARGIN ---
*=================================

*trade of planning reserve margin capacity cannot exceed the transmission line's available capacity
eq_PRMTRADELimit(r,rr,szn,t)$[tmodel(t)$rfeas(r)$rfeas(rr)
                         $sum{trtype,routes_region(r,rr,trtype,t)}$Sw_PRM]..

    sum{trtype$[routes_region(r,rr,trtype,t)],CAPTRAN(r,rr,trtype,t)}

    =g=

    PRMTRADE(r,rr,szn,t)
;


*following equation assumes the ratio of all demand to peak demand remains constant
eq_reserve_margin(region,szn,t)$[tmodel(t)$Sw_PRM]..

*sum of all non-rsc capacity
    sum{(i,c,r)$[r_region(r,region)$valcap(i,c,r,t)$(not rsc_i(i))$(not storage(i))],
        CAP(i,c,r,t) }

*average capacity value times capacity
*used in rolling window and full intertemporal solve
    + sum{r$r_region(r,region),
        sum{(i,c,rr)$[cap_agg(r,rr)$(rsc_i(i) or storage(i))$(not hydro(i))$valcap(i,c,rr,t)],
          cc_avg(i,rr,szn,t) * CAP(i,c,rr,t)}
        } 

    + sum{(i,c,r)$[r_region(r,region)$valcap(i,c,r,t)$(hydro_d(i))],
      cc_hydro(i,r,szn,t) * CAP(i,c,r,t) } 

*[plus] net trade of firm capacity
    + sum{(r,rr)$[r_region(r,region)$sum{trtype,routes_region(rr,r,trtype,t)}$rfeas(rr)$Sw_PRMTrade],(1-tranloss(rr,r))*PRMTRADE(rr,r,szn,t) }
    - sum{(rr,r)$[r_region(r,region)$sum{trtype,routes_region(r,rr,trtype,t)}$rfeas(rr)$Sw_PRMTrade],PRMTRADE(r,rr,szn,t) }

    =g=

    (1+prm_region(region,t)) * peakdem_region(region,szn,t)
;


*================================
* --- TRANSMISSION CAPACITY  ---
*================================

*capacity transmission is equal to the exogenously-specified level of transmission
*plus the investment in transmission capacity
eq_CAPTRANEq(r,rr,trtype,t)$[routes(r,rr,trtype,t)$tmodel(t)$rfeas(r)$rfeas(rr)]..

    CAPTRAN(r,rr,trtype,t)

    =e=

*exogenous transmission capacity has already included both r,rr and rr,r in a_inputs
    trancap_exog(r,rr,trtype,t)

*all previous year's investment, note this can apply for both r and rr
    + sum{(tt)$[(yeart(tt) <= yeart(t))$(tmodel(tt) or tfix(tt))$(tt.val>2020)],
         INVTRAN(r,rr,tt,trtype) + INVTRAN(rr,r,tt,trtype) }
;


*the total amount of substations must fill
*all of the substation voltage class bins
eq_SubStationAccounting(r,t)$[rfeas(r)$tmodel(t)]..

*sum over all voltage classes of substation investments
    sum{vc$tranfeas(r,vc),INVSUBSTATION(r,vc,t) }

    =e=

*is equal to the total amount of AC investment, both in- and out- going
    sum{(rr)$rfeas(rr),
         INVTRAN(r,rr,t,"AC")$routes(r,rr,"AC",t) + INVTRAN(rr,r,t,"AC")$routes(rr,r,"AC",t) }
;


*investment in each voltage class cannot exceed the capacity
*of that substation bin (aka voltage class)
eq_INVTRAN_VCLimit(r,vc)$[rfeas(r)$tranfeas(r,vc)]..

*the voltage class bin's available capacity
    trancost(r,"CAP",vc)

    =g=

*cannot exceed total capacity
    sum{t$[tmodel(t) or tfix(t)],INVSUBSTATION(r,vc,t) }
;


* flow plus OR reserves cannot exceed the total transmission capacity
eq_transmission_limit(r,rr,h,t,trtype)$[tmodel(t)$rfeas(r)$rfeas(rr)
                                        $(routes(r,rr,trtype,t) or routes(rr,r,trtype,t))]..

    CAPTRAN(r,rr,trtype,t)

    =g=

    FLOW(r,rr,h,t,trtype)
    + sum{ortype,OPRES_FLOW(ortype,r,rr,h,t) }$[sameas(trtype,"AC")$Sw_OpResTrade]
;


*=========================
* --- CARBON POLICIES ---
*=========================

eq_co2_accounting(r,t)$[rfeas(r)$tmodel(t)]..

    EMIT(r,t)

    =e=

    sum{(i,c,h)$[valgen(i,c,r,t)],
         hours(h) * co2_rate(i,c,r,t) * GEN(i,c,r,h,t) }
;


eq_co2_rate_limit(r,t)$[co2rate(r,t)$(yeart(t)>=CarbonPolicyStartYear)$tmodel(t)$rfeas(r)]..

    co2_rate_limit(r,t) * (
         sum{(i,c,h)$[valgen(i,c,r,t)],  hours(h) * GEN(i,c,r,h,t) }
    )

    =g=

    EMIT(r,t)
;


eq_co2_mass_limit(t)$[(yeart(t)>=CarbonPolicyStartYear)$tmodel(t)$Sw_CO2Limit]..

    co2_mass_limit_nat(t)

    =g=

    sum{r$rfeas(r),EMIT(r,t) }
;

*=========================
* --- RE GEOGRAPHIC DIVERSITY CONSTRAINT ---
*=========================

eq_re_diversity(i,r,t)$[tmodel(t)$rs(r)$rfeas(r)$(wind(i) or upv(i))$Sw_REdiversity]..

    sum{(rr,c,rscbin)$[rs(rr)$valcap(i,c,rr,t)$newc(c)$m_rscfeas(rr,i,rscbin)], INV_RSC(i,c,rr,t,rscbin)} * REdiversity

    =g=

    sum{(c,rscbin)$[rs(r)$valcap(i,c,r,t)$newc(c)$m_rscfeas(r,i,rscbin)], INV_RSC(i,c,r,t,rscbin)}
;
