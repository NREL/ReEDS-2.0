## Version Control and Testing
### ReEDS Versioning & Releases
This section outlines the current ReEDS approach to versioning. You can find current and past ReEDS versions here: {{ '[ReEDS-2.0 Releases]({}/releases)'.format(base_github_url) }}

#### Versioning overview

GitHub Releases are used to create ReEDS versions on a monthly cadence after a suite of tests are performed. More on ReEDS testing can be found [here](./Testing). More information on GitHub Releases can be found in the [GitHub Doc](https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases). 

Releases are based on Git tags, and the proposed versioning scheme is `EPOCH.RELEASE.PATCH`. The components are: 
- `EPOCH`: The current year, this will be incremented in January of each year (e.g., 2023)
- `RELEASE`: Restarts from 0 when EPOCH is increased, then increased by 1 each month when the newest version is created
- `PATCH`: Typically will just be 0, but could increment if an important update or bug fix needs to be merged in prior to the next monthly release. 

#### Tagging versions

Tagging with GitHub releases is not done manually with each pull request. After a new release has been created, a tag will be generated. 

How to use tags:
- You can check them out like any other commit: `git checkout tags/2023.1.0`
  - You may need to fetch tags to your machine first: `git fetch --tags`
  - If you plan to develop from an older tag (i.e., you’re not checking out main on the most recent tag and you plan to commit new changes), you’ll also want to specify a branch or create a new one: `git checkout -b <new branch name> <tag name>`
- ReEDS2X tool versions should reference the last ReEDS version they're known to work for in their tag text or README
  - Each ReEDS run produces a meta.csv file with information on the branch, commit, and version of that run which can be used to determine the vintage of any given ReEDS run.
- If you're using ReEDS2X for a side project and would like to tag versions for them to refer to, the suggested format is: `EPOCH.RELEASE.PATCH.PROJECTNAME`, where `EPOCH.RELEASE.PATCH` refers to the last version of main that has been merged into your project branch.
  -	The same format can be used to tag specific versions of the model that are used for published analyses that are not merged into main, e.g. 2023.4.0.hybrids.
  -	In general, please add custom components to the tail of the version number instead of the beginning to keep them easy to sort.


### Testing Guidelines
This section outlines the recommended testing that should be performed on ReEDS prior to creating a pull request or a new version. 

#### Post-process Test
**This testing should be performed when a change is made that does not change model code or data that might impact model outputs. Ex: changing the color styles in bokeh output plot, or adjusting a post-processing script such as runstatus.py**

1. Ensure the post-processing capabilities operate correctly on outputs from the most recent version of main
   - A demonstration of this should be included in the pull request
2. Verify that R2X pytest passes

#### Light Test (Pacific Region)
**This testing should be performed for changes to model code that are not expected to have any meaningful impact on the model solution. Examples include:**

* **Rounding an input parameter**

* **Changing the name of a column or model parameter**

* **Updating code within an if statement where the if statement does not apply under default settings (e.g., "if int(sw.GSw_calc_powfrac):" where the default value of sw.GSw_calc_powfrac is 0)**

* **Adding a missing entry to run files.csv**

1. Do a comparison run of the default test case (cases_test.csv) against a test run from main and produce a comparison report. 
   - The report should be examined for any unexpected outputs and included in the pull request for review
2. Verify that R2X pytest passes

#### Regular Test (Full U.S.)
**This testing should be performed for all other cases not covered by the post-process or light test**

1. Do a comparison run of the default case (cases.csv) against a run from main and produce a comparison report. 
   - You should be able to reasonably explain changes in capacity, generation, transmission capacity, bulk system electricity price, system cost, and runtime
   - The report should be included in the pull request 
2. Verify that R2X pytest passes

#### New Version Test
**This testing is required for a new tagged and released version**

The full set of scenarios in `cases_test.csv` is run on HPC and Yampa (tests are also run locally on Mac or Windows, with the exception of the USA_decarb scenario). All test scenarios, with the exception of the following, must succeed in order for a new version to be created: 
  * Pacific test case with water constraints
  * Pacific test case with PVB turned on 
  * Pacific test case with detailed CO2 transport & storage 
  * Pacific test case with representatives weks
  * Pacific test case with full chronological year

For any error in the output processing scripts, a new GitHub issue should be created. Additionally, the issue should be noted in the release notes for the new version.

Lastly, comparison reports are created for the USA and USA_decarb scenarios to compare the current version with the previous released version. Those comparison reports should be attached to the release notes for reference.