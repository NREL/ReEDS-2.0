## Pull Request Best Practices
### Best Practices for Creating PRs
To ensure a smooth process and maintain quality of the ReEDS model, the following are best practices that should be followed when creating a pull request:
* Prior to creating a pull request, perform the appropriate level of testing on your branch
  * The Full U.S. test (in cases.csv) will be used in most cases
  * For more information on testing, see the [Testing Guidlines section](#testing-guidelines)

* Ensure the title of your pull request is both descriptive and concise
  * This is crucial, as the title of your pull request will be used in the summary of changes for each new version of ReEDS

* Fill out the pull request template in detail
  * The description should be clear enough for someone not directly involved in your work to grasp the changes being proposed
  * Assign and contact reviewers
    * Best practice is to have 2 reviewers from the ReEDS team

* Keep your pull request in draft mode until it is ready to be merged into the main branch, indicating to reviewers that it is still a work in progresss

* Provide a charge code to your reviewers for their time spent reviewing

* Create smaller pull requests more frequently when possible
  * This helps avoid merge conflicts and simplifies the review process, making it more manageable for reviewers

* After creating the pull request, monitor the status of the automated tests
  * This runs the R2X test automatically

* Prior to merging your pull request, make sure to update the relevant documentation to reflect your changes. There are two places that should be updated (more information on this can be found in the [documentation guidelines](#documentation-guidelines)):
  1. Sources_documentation
  2. The 'docs/' folder within the repository

### Resolving Merge Conflicts
Sometimes you might run into merge conflicts when trying to merge your branch into another branch. Merge conflicts happen when there are competing commits that Git needs you to help decide which changes should be kept in the final merge.

Merge conflicts must be resolved prior to merging a pull request and there are different ways to handle merge conflicts: 
  * Simple merge conflicts can be resolved on GitHub. To learn more about how to do this, refer to GitHub's documentation on [Resolving merge conflicts on GitHub](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github)

  * Larger or more complex merge conflicts will need to be resolved using the command line and a text editor (e.g., VSCode). To learn more about how to do this, refer to GitHub's documentation on [Resolving merge conflicts using the command line](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line)

### Tips and Best Practices for PR Reviews
The following are best practices that should be considered when reviewing pull requests: 
1. Understand the context of the pull request
   * Prior to reviewing any code changes, read the PR thoroughly
     * Is the title descriptive?
     * Does the summary accurately state what the PR is trying to accomplish?
     * Is there sufficient information in the pull request to accurately convey the changes being made? Because the PR is documenting the change, part of your review entails ensuring that the model changes are properly reflected in the PR text.
     * What is the high-level impact of this PR? Can you summarize the change on the run results in 1-2 sentences?
   * Look at any linked issues or pull requests and understand what is being fixed in this pull request and which issues or incompatibilities are not being addressed.

2. Look at the compare report and any other figures included in the PR
   * Do you understand why these code/file changes resulted in these results?
   * What is the high-level impact of this PR? Can you summarize the change on the run results in 1-2 sentences?
   * Are these changes explainable/justifiable to both our internal and external audiences? 

3. Review the code
   * Look at each file that has changed
     * Do code changes or new code added make sense?
     * Ensure newly added code is documented (even if it's just a single-line comment)
     * Flag any instances where you notice that the code does not follow the [Coding Conventions](#coding-conventions)
     * Identify if/how these code changes could cause problems later.
       * What other parts of the model do these changes interact with? Is that interaction broken or no longer an accurate representation with these changes?
       * What could break if we ran different scenarios with these changes? We typically look at the impact of our changes on "main" or "Standard Scenarios Mid-Case" type runs but also consider the potential impact on decarbonization scenarios, county level runs, smaller region runs, scenarios with hydrogen enabled, etc. We want to foresee any possible impacts this might have. If you have a concern or are curious about how this change might impact a certain type of run, ask the PR author, they might have looked at similar scenarios. 

4. Look at any input files that have changed
   * Reviewing the commit history can sometimes be helpful in determining what has changed
   * Do the input changes make sense? Are they consistent with the PR descriptions?
   * There are a couple tools that help with comparing two different csv files: 
     * [VSCode diff panel](https://vscode.one/diff-vscode/)
     * [csvdiff](https://pypi.org/project/csvdiff/#:~:text=csvdiff%20allows%20you%20to%20compare,look%20at%20just%20what's%20changed.)
    
5. Check out the branch locally (optional)
   * You should check the branch out locally and run the test scenario(cases_test.csv) to ensure there are no issues 
   * If there are a large amount of changes to one of the scripts or code files (ex. input_processing scripts or GAMS files), it could be helpful to run just that script and walk through it line by line with a debugging tool (ex. [pdb](https://docs.python.org/3/library/pdb.html)) to more deeply understand how the revised script functions and any issues we might face with the way that script is now written.

**A few notes on reviewing pull requests:**
   * When reviewing PRs, be sure to provide constructive feedback and highlight positive aspects as well. Reviewing PRs is an opportunity to learn from one another and support each other's development as developers!
   * Ask clarifying questions if something is unclear
     * Reviewing PRs can be daunting if you are new to the team or to the code development process. Remember that this is an opportunity for you to learn more about the model as much as it is about getting the code changes integrated into the model. Even experienced developers make errors, hence the importance of getting a second set of eyes on the code changes. Your input and insights are valuable.
     * If you don't understand what is going on with a code change, chances are high that others won't understand either, so ask for clarification, including asking for more comments or explanation in the PR text.
     * If there is a section of the PR that you don't feel comfortable reviewing, you should request a review from another team member
   * Request changes as necessary and explain your reasoning
   * Remember that the PR submitter is ultimately responsible for the changes in the PR, not you, so give the PR review a good effort, but don't agonize over every detail. 
     * If reviewing a PR becomes too large of a chore, feel free to reach out to others on the team to be able to tackle the PR review jointly
   * If necessary, make sure the [ReEDS documentation](https://pages.github.nrel.gov/ReEDS/ReEDS-2.0/index.html) was updated to reflect the code changes
     * Instructions for how to update the documentation can be found [here](#updating-the-reeds-documentation)
