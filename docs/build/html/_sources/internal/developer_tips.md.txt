## ReEDS Development Tips
### Debugging Python Code
When working with python code, there are a couple of useful methods for debugging. The first is using the Python Interactive Window. 

Cells are denoted by `#%%`, and you can run the code in a given file by cells in the interactive window. This allows you to view data and variables, as well as create graphs and visuals. This can be very helpful in stepping through a script to see what is happening in your code. 

For more information, see the [Python Interactive Window documentation](https://code.visualstudio.com/docs/python/jupyter-support-py#:~:text=For%20the%20whole%20notebook%2C%20open,the%20code%20in%20that%20cell.).

Another way to debug is to use the Python Debugger Extension in VS Code. For more information on how to set up and use the python debugger, see [Python debugging in VS Code](https://code.visualstudio.com/docs/python/debugging). 

When using the python debugger, you will need to set a configuration. Here's an example of what that might look like (`launch.json` file): 

```
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python Debugger: calc_financial_inputs.py with arguments",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "args": [
                "/Users/kminderm/ReEDS-2.0",
                "/Users/kminderm/ReEDS-2.0/runs/main_Pacific/inputs_case"
            ],
            "purpose": ["debug-in-terminal"]
        },

    ]
}
```

For more on debugging, you can watch the following video: [GPAC's WEI Tips and Tricks Series: Introduction to Debugging](https://nrel.sharepoint.com/:v:/s/6A90-GridPlanningandAnalysisCenterGPAC/ERsyIuWezH1Mix2ZoGiGJk4B3S8u0KNqsIDG6QVbPQK3rw?e=FhUWGx&nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJTdHJlYW1XZWJBcHAiLCJyZWZlcnJhbFZpZXciOiJTaGFyZURpYWxvZy1MaW5rIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXcifX0%3D)


### Debugging GAMS Code
When making changes to the GAMS code, something that can be helpful when debugging an issue is to compare the data before and after your change. You can do that by inserting an 'execute unload' statement into the gams code. Example of what this looks like: 

```
execute_unload 'before.gdx' ;
```

If you're interested in only a specific variable, you can specify it like this: 
```
execute_unload 'before.gdx' valcap ; 
```

Additionally, if you want to re-run a given scenario without having to run all of the input processing again, you can open the `call_{batch name}_{case}.bat/.sh` file, delete all of the lines you don't want to run again, and then run that file from the command line. **Note: be sure to edit/run the `call_{batch name}_{case}.bat/.sh` file from within the specific run folder**



### Additional Development Tips
* To avoid the prompts when kicking off a run, you can use the command line arguments: 
   * The following example runs the scenarios in cases_test.csv with the batch name '20240717_test'. The '-r -1' means that all cases will run simultaneously.  
   ```
   python runbatch.py -c test -b 20240717_test -r -1
   ```
    * All options for command line arguments that can be used: 
        | Flag | |
        | --- | --- | 
        | `--BatchName` / `-b` | Name for batch of runs |
        | `--cases_suffix` / `-c` | Suffix for cases CSV file |
        | `--single` / `-s` | Name of a single case to run (or comma-delimited list) |
        | `--simult_runs` / `-r` | Number of simultaneous runs. If negative, run all simultaneously |
        | `--forcelocal` / `-l` | Force model to run locally instead of submitting a slurm job |
        | `--restart` / `-r` | Switch to restart existing ReEDS runs |
        | `--skip_checks` / `-f` | Force run, skipping checks on conda environment and switches |
        | `--debug` / `-d` | Run in debug mode (same behavior as debug switch in cases.csv) |
        | `--debugnode` / `-n` | Run using debug specifications for slurm on an hpc system |




* If you're on Mac and would like to have the terminal always show what branch you're on, you can set up Git Bash for Mac with the following: [Git Bash for Mac](https://github.com/fabriziocucci/git-bash-for-mac)

* Using the following run name format keeps your runs folder organized: 'vYYYYMMDD'